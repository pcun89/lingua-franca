import unittest
from lf_simulator import Reactor, Event


class TestReactor(unittest.TestCase):

    def setUp(self):
        self.reactor = Reactor("TestReactor")

    def test_input_output_flow(self):
        # Send input
        self.reactor.sendInput("TestMessage")
        self.reactor.triggerReaction()

        # Collect output
        outputs = self.reactor.pollOutput()
        self.assertEqual(len(outputs), 1)

        output_event = outputs[0]

        # Check output payload
        self.assertEqual(output_event.payload, "Processed: TestMessage")

        # Check timestamp
        self.assertEqual(output_event.timestamp, 2)  # 1 input + 1 reaction delay

    def test_multiple_inputs(self):
        messages = ["A", "B", "C"]
        for msg in messages:
            self.reactor.sendInput(msg)
        self.reactor.triggerReaction()

        outputs = self.reactor.pollOutput()
        self.assertEqual(len(outputs), 3)

        expected_payloads = [f"Processed: {msg}" for msg in messages]
        actual_payloads = [e.payload for e in outputs]

        self.assertListEqual(actual_payloads, expected_payloads)

    def test_event_order_and_time(self):
        self.reactor.sendInput("First")
        self.reactor.triggerReaction()
        out1 = self.reactor.pollOutput()[0]

        self.reactor.sendInput("Second")
        self.reactor.triggerReaction()
        out2 = self.reactor.pollOutput()[0]

        self.assertTrue(out1.timestamp < out2.timestamp)
        self.assertEqual(out2.timestamp, out1.timestamp + 2)


if __name__ == '__main__':
    unittest.main()
